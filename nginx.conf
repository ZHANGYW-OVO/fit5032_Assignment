# Nginx 配置文件 - 优化的生产环境配置
user nginx-user;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

# 事件模块配置
events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

# HTTP 模块配置
http {
    # MIME 类型
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # 基本配置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # 客户端配置
    client_max_body_size 10M;
    client_body_timeout 30s;
    client_header_timeout 30s;

    # Gzip 压缩配置
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        text/csv
        application/javascript
        application/json
        application/xml+rss
        application/atom+xml
        image/svg+xml
        font/ttf
        font/otf
        font/woff
        font/woff2;

    # Brotli 压缩（如果需要）
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/xml image/svg+xml application/x-font-ttf image/vnd.microsoft.icon application/x-font-opentype application/json font/eot application/vnd.ms-fontobject application/javascript font/otf application/xml application/xhtml+xml text/javascript application/x-javascript text/plain application/x-font-truetype application/xml+rss image/x-icon font/opentype text/css image/x-win-bitmap;

    # 速率限制
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=30r/s;

    # 缓存配置
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=STATIC:10m inactive=7d use_temp_path=off;

    # 主服务器配置
    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;

        # 安全头部
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # 内容安全策略
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com https://www.googletagmanager.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https: blob:; connect-src 'self' https://api.emailjs.com https://*.firebaseapp.com; frame-src 'none'; object-src 'none'; base-uri 'self'; form-action 'self'" always;

        # 权限策略
        add_header Permissions-Policy "camera=(), microphone=(), geolocation=(self), payment=(), usb=()" always;

        # 健康检查端点
        location = /health {
            access_log off;
            add_header Content-Type application/json;
            return 200 '{"status":"healthy","timestamp":"$time_iso8601","service":"elderly-health-app"}';
        }

        # API 路由（如果有后端 API）
        location /api/ {
            # 应用速率限制
            limit_req zone=api burst=20 nodelay;
            
            # 代理到后端 API
            proxy_pass http://api-backend:3000/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # 超时设置
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # CORS 头部
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-API-Key" always;
            
            # 处理 OPTIONS 请求
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-API-Key" always;
                add_header Access-Control-Max-Age 86400;
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
        }

        # 静态资源缓存 - 版本化资源（长期缓存）
        location ~* ^/assets/.*\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            
            # 预压缩文件支持
            gzip_static on;
        }

        # 字体文件缓存
        location ~* \.(woff|woff2|ttf|eot|otf)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Access-Control-Allow-Origin *;
        }

        # 图像文件缓存
        location ~* \.(png|jpg|jpeg|gif|ico|svg|webp)$ {
            expires 30d;
            add_header Cache-Control "public";
            add_header Vary Accept-Encoding;
        }

        # JavaScript 和 CSS 文件
        location ~* \.(js|css)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            gzip_static on;
        }

        # HTML 文件 - 不缓存
        location ~* \.html$ {
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
        }

        # Service Worker - 不缓存
        location = /sw.js {
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
        }

        # Manifest 文件
        location = /manifest.json {
            expires 1d;
            add_header Cache-Control "public";
        }

        # Robots.txt 和 sitemap
        location = /robots.txt {
            expires 1d;
            add_header Cache-Control "public";
            log_not_found off;
            access_log off;
        }

        location = /sitemap.xml {
            expires 1d;
            add_header Cache-Control "public";
            log_not_found off;
        }

        # 隐藏敏感文件
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # 主 SPA 路由 - 必须在最后
        location / {
            # 应用一般速率限制
            limit_req zone=general burst=50 nodelay;
            
            try_files $uri $uri/ /index.html;
            
            # HTML 缓存控制
            location ~ \.html$ {
                expires -1;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
            }
        }

        # 错误页面
        error_page 404 /index.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }

    # 额外的安全配置
    server {
        listen 80 default_server;
        server_name _;
        return 444;  # 拒绝未知主机
    }
}

# 备注：在生产环境中考虑以下优化：
# 1. 启用 HTTP/2
# 2. 配置 SSL/TLS
# 3. 使用 Brotli 压缩
# 4. 配置 CDN
# 5. 监控和日志分析